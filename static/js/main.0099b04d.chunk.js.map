{"version":3,"sources":["logo.svg","components/ResultsModule.js","components/HomePageModule.js","components/FooterModule.js","components/App.js","reportWebVitals.js","index.js"],"names":["ResultsModule","props","useState","cards","setCards","googleData","payload","useEffect","map","result","ResultCard","className","isFlipped","setFlip","ResultCardDetails","onClick","ResultCardBack","name","formatted_address","icon","faGoogle","createReviewStars","rating","createPriceLevel","price_level","window","open","googleURI","encodeURIComponent","rawRating","roundedRating","Math","round","diff","abs","floor","stars","index","filledStar","faStarHalfAlt","emptyStar","priceLevel","signs","i","faDollarSign","HomePageModule","isLoaded","setLoaded","inputValue","setInputValue","setGoogleData","onChange","event","val","target","value","placeholder","type","loader","Loader","apiKey","CONFIG","GOOGLE_API_KEY","version","libraries","request","query","trim","load","then","google","maps","places","PlacesService","document","createElement","textSearch","results","status","pagination","PlacesServiceStatus","OK","place","push","hasNextPage","nextPage","console","log","freqMap","length","arr","random","pickFiveIndices","catch","err","faSearch","faSpinner","FooterModule","faHeart","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0099b04d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar as filledStar, faStarHalfAlt, faDollarSign } from '@fortawesome/free-solid-svg-icons';\nimport { faStar as emptyStar } from '@fortawesome/free-regular-svg-icons';\nimport { faGoogle, faYelp } from '@fortawesome/free-brands-svg-icons'\n\nconst googleURI = 'https://www.google.com/search?';\n\nexport default function ResultsModule(props) {\n    const [cards, setCards] = useState([]);\n    const googleData = props.payload.googleData;\n    // const onePlace = props.payload.test_place.businesses[0];\n\n    useEffect(() => {\n        // Map out result data into cards\n        setCards(googleData.map((result) => (<ResultCard payload={{ googleData: result }}/>)));\n    }, [googleData])\n\n    return (\n        <div className=\"result-module\">\n            { cards }\n        </div>\n    );\n}\n\nfunction ResultCard(props) {\n    const [isFlipped, setFlip] = useState(false);\n    const googleData = props.payload.googleData;\n\n    const handleClick = () => {\n        // Flip the card to its front\n        setFlip(true);\n    }\n\n    return (\n        <div className=\"columns is-mobile is-centered\">\n            { isFlipped ? <ResultCardDetails googleData={googleData} /> : <a className=\"column is-centered\" onClick={handleClick} ><ResultCardBack /></a> }\n        </div>\n    );\n}\n\nfunction ResultCardBack() {\n    return (\n        <div className=\"card result-card result-card-back\">\n            <p>n.</p>\n        </div>\n    )\n}\n\nfunction ResultCardDetails(props) {\n    const googleData = props.googleData;\n\n    const handleGoogle = () => {\n        // Direct to google\n        window.open(googleURI + 'q=' + encodeURIComponent(googleData.name + ' at ' + googleData.formatted_address), '_blank');\n    }\n\n    return (\n        <div className=\"card result-card is-mobile\">\n            <div className=\"card-header media-left\">\n                {/* <figure className=\"image-container\">\n                    <img className=\"result-image\" width=\"128\" height=\"128\" src={yelpData.image_url} />\n                </figure> */}\n                <div className=\"result-card-header is-fullwidth media-content\">\n                    <h1><strong className=\"result-card-header-name\">{googleData.name}</strong></h1>\n                    {/* <h2 className=\"result-card-header-cuisines\"><em>{createCuisines(yelpData.categories)}</em></h2> */}\n                    <h3 className=\"result-card-header-address\">{googleData.formatted_address}</h3>\n                </div>\n            </div>\n            <div className=\"card-content columns\">\n                <div className=\"column is-centered is-mobile result-card-rating\">\n                    <div className=\"is-narrow is-mobile\">\n                        <FontAwesomeIcon className=\"rating-icon\" icon={faGoogle} />\n                        {createReviewStars(googleData.rating)}\n                        <span className=\"rating-text\">{googleData.rating}</span>\n                        <span className=\"rating-separator\"></span>\n                        {createPriceLevel(googleData.price_level)}\n                    </div>\n                    {/* <div className=\"column is-narrow\">\n                        <FontAwesomeIcon className=\"rating-icon\" icon={faYelp} />\n                        {createReviewStars(yelpData.rating)}\n                        <span className=\"rating-text\">{yelpData.rating}</span>\n                    </div> */}\n                    {/* <div className=\"is-narrow is-mobile\">\n                        <p>{createPriceLevel(googleData.price_level)}</p>\n                    </div> */}\n                </div>\n            </div>\n            <div className=\"card-footer buttons action-buttons\">\n                <button className=\"button card-footer-item is-danger is-outlined\" onClick={handleGoogle}>GOOGLE</button>\n                {/* <button className=\"button card-footer-item is-info is-outlined\">MAP</button> */}\n            </div>\n        </div>\n    )\n}\n\n/* Private function helpers */\nfunction createCuisines(obj) {\n    const arr = Object.keys(obj);\n    let str = obj[arr[0]].title;\n    for (let i = 1; i < arr.length; i++) {\n        str += \", \" + obj[arr[i]].title;\n    }\n    return str;\n}\n\nfunction createReviewStars(rawRating) {\n    let rating = 0;\n    const roundedRating = Math.round(rawRating);\n    const diff = roundedRating - rawRating;\n\n    if (Math.abs(diff) >= 0.25) {\n        rating = Math.floor(rawRating) + 0.5;\n    } else {\n        rating = (diff < 0) ? Math.floor(rawRating) : roundedRating;\n    }\n\n    let stars = [];\n    let index = 0;\n\n    while (rating > 0.5) {\n        stars[index++] = <FontAwesomeIcon icon={filledStar} />;\n        rating--;\n    }\n\n    if (rating === 0.5) {\n        stars[index++] = <FontAwesomeIcon icon={faStarHalfAlt} />\n        rating -= 0.5;\n    };\n    \n    while (index < 5) {\n        stars[index++] = <FontAwesomeIcon icon={emptyStar} />;\n    }\n\n    return stars;\n}\n\nfunction createPriceLevel(priceLevel) {\n    let signs = [];\n\n    for (let i = 0; i < priceLevel; i++) {\n        signs[i] = <FontAwesomeIcon icon={faDollarSign} />;\n    }\n    \n    return signs;\n}\n\nfunction encodeQueryParams(obj) {\n    let str = \"\";\n    let start = true;\n\n    for (const [key, value] of Object.entries(obj)) {\n        if (start) {\n            str += key + '=' + value;\n            start = false;\n        }\n        else {\n            str += '&' + key + '=' + value;\n        }\n    }\n\n    return str;\n}","import React, { useState } from 'react';\nimport TEST_DATA from '../json/test-data.json';\nimport TEST_PLACE from '../json/test-place.json';\nimport ResultsModule from './ResultsModule.js';\nimport CONFIG from '../config.json';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport $ from 'jquery';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStroopwafel, faSpinner, faSearch } from '@fortawesome/free-solid-svg-icons';\n\n\nconst GOOGLE_URI = 'https://maps.googleapis.com/maps/api/place/textsearch/json?';\nconst YELP_URI = 'https://api.yelp.com/v3/businesses/search?';\n\nexport default function HomePageModule() {\n    // DEBUG\n    const TD = {\n        test_data: TEST_DATA,\n        test_place: TEST_PLACE\n    };\n    const [isLoaded, setLoaded] = useState(true);\n    const [inputValue, setInputValue] = useState('');\n    const [googleData, setGoogleData] = useState([]);\n    const [yelpData, setYelpData] = useState([]);\n\n    // Handlers \n    const handleClick = () => {\n        setLoaded(false);\n        // Send GET request to Google\n        const loader = new Loader({\n            apiKey: CONFIG.GOOGLE_API_KEY,\n            version: 'weekly',\n            libraries: ['places']\n        });\n\n        const request = {\n            query: 'restaurants in ' + inputValue.trim(),\n            type: ['restaurants']\n        }\n\n        let googleData = [];\n\n        loader\n            .load()\n            .then((google) => {\n                const g = new google.maps.places.PlacesService(document.createElement('div'));\n                g.textSearch(request, (results, status, pagination) => {\n                    if (status === google.maps.places.PlacesServiceStatus.OK) {\n                        // Add all of the results into the array\n                        for (let place in results) googleData.push(results[place]);\n\n                        if (pagination && pagination.hasNextPage) { // Get more results\n                            pagination.nextPage();\n                        } else {    // If there are no more results\n                            console.log(googleData);\n                            setGoogleData(pickFiveIndices(googleData));\n                            setLoaded(true);\n                        }\n\n                        // @TODO: get yelp data when i have a server side\n                        // getYelpData(googleData, setYelpData);\n\n                    } else {\n                        // @TODO: handle error case\n                    }\n                });\n            })\n            .catch((err) => console.log(err));\n    }      \n\n    const handleChange = (event) => {\n        let val = event.target.value;\n\n        setInputValue(val);\n    }\n\n    return (\n        <div>\n            <div className=\"columns is-tablet is-mobile is-centered\">\n                <div className=\"column is-6-desktop is-6-tablet is-8-mobile is-centered\">\n                    <input className=\"input is-rounded\" onChange={handleChange} placeholder=\"ex: Seattle, WA\"></input>\n                </div>\n                <div className=\"column is-1-desktop is-2-tablet is-2-mobile is-centered\">\n                    <button className=\"button is-black is-rounded\" type=\"input\" onClick={handleClick}>\n                        <FontAwesomeIcon icon={faSearch} />\n                    </button>\n                </div>\n            </div>\n            <div className=\"columns is-centered\">\n            { isLoaded ?  <div className=\"columns is-centered is-mobile is-tablet is-centered\"> { googleData ? <ResultsModule payload={{ googleData: googleData }} /> : <span></span> } </div> :  <FontAwesomeIcon className=\"spinner fa-spin\" icon={faSpinner} /> }\n            </div>\n        </div>\n    );\n}\n\nfunction pickFiveIndices(results) {\n    let freqMap = [];\n\n    for (let i = 0; i < results.length; i++) freqMap[i] = 0;\n\n    let arr = [];\n\n    while (arr.length < 5) {\n        const index = Math.floor(Math.random() * results.length);\n\n        if (freqMap[index] === 0) {\n            freqMap[index]++;\n            arr.push(results[index]);\n        }\n    }\n\n    return arr;\n}","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function FooterModule() {\n    return (\n        <div className=\"footer\">\n            <h1>\n                Made with <FontAwesomeIcon icon={faHeart} /> by Elbert Cheng\n            </h1>\n        </div>\n    );\n}","import logo from '../logo.svg';\nimport 'bulma/css/bulma.min.css';\nimport '../css/App.css';\nimport 'whatwg-fetch';\nimport HomePageModule from './HomePageModule';\nimport FooterModule from './FooterModule';\n\nfunction App() {\n\n  return (\n    <div className=\"hero is-fullheight home-page\">\n      <main className=\"title-container\">\n          <div className=\"column is-2 is-offset-5\">\n              <h1><strong className=\"title-text\">nibbl.</strong></h1>\n          </div>\n          <HomePageModule className=\"home-page-container\" />\n      </main>\n      <footer className=\"footer\">\n        <FooterModule />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}